/** @file colmain.skel
 *  Skeleton file for collection main program
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <assert.h>
#include <sys/types.h>
#include <unistd.h>
#include <limits.h>
#include "nl.h"
#include "dtoe.h"
#include "oui.h"
#include "dasio/tm.h"
#include "dasio/tm_gen.h"
#include "dasio/tm_gen_col.h"
#include "dasio/tm_data_rcvr.h"

using namespace DAS_IO;

%headers%

/* Skeleton console_functions section */
/* Photon and resource manager probably don't mix */
%console_functions%

/* Skeleton data_defs section */
/* Some temporary defs until everything is in the right place */
#ifndef TS_MFC_LIMIT
  #define TS_MFC_LIMIT 32767
#endif

/* for debugging */
int check_ts = 1;

#define incmod(x,y) if (x==((y)-1)) x = 0; else x++

//static short rowlets;

#if (NROWMINF == 1)
  #define MINF_ROW 0
  #define MINF_ROW_INC
#else
  #define MINF_ROW collector::minf_row
  #define MINF_ROW_INC incmod(collector::minf_row,NROWMINF)
#endif

%data_defs%

/* Skeleton main_program section */
int main(int argc, char **argv) {
  oui_init_options(argc, argv);
  msg( 0, "Startup");
  tmc_collector col;
  col.init();
  col.init_senders();
  DAS_IO::tminitfunc();
  col.Start(Server::Srv_Function, "tm_gen");
  msg( 0, "Shutdown" );
  return 0;
}

%main_program%

/* Skeleton Collect_Row section */
/**
 * Called from a slow timer to make sure we aren't drifting.
 */
void DAS_IO::tmc_collector::ts_check() {
  rowlets -= TRN;
  if (rowlets < LOWLIM || rowlets > HIGHLIM)
    ts_checks = TSCHK_RTIME | TSCHK_CHECK;
}

void DAS_IO::tmc_collector::event(enum tm_gen_event evt) {
  collector::event(evt);
  if ( evt == tmg_event_start ) {
    rowlets = 0;
    ts_checks =  TSCHK_RTIME | TSCHK_REQUIRED;
  #ifdef SUBBUS_H_INCLUDED
    } else if ( evt == tmg_event_stop ||
                evt == tmg_event_quit ) {
      disarm_sic();
  #endif
  }
}

/**
 * Should come up with a test to guarantee that the right thing
 * happens in all circumstances. 
 */
void DAS_IO::tmc_collector::service_row_timer() {
  le_time_t rtime;
  long dt;
  
  #ifdef SUBBUS_H_INCLUDED
    tick_sic();
  #endif
  if (ts_checks & TSCHK_RTIME) {
    rtime = time(NULL);
    // It's only reasonable to check realtime at even second boundaries
    // This check assumes tm_info.t_stmp.mfc_num % MFSECNUM == 0
    if ((ts_checks & TSCHK_CHECK) && next_minor_frame%MFSECNUM == 0) {
      dt = (next_minor_frame - tm_info.t_stmp.mfc_num)/MFSECNUM;
      dt *= MFSECDEN;
      dt = rtime - dt - tm_info.t_stmp.secs;
      if (dt > SECDRIFT || dt < -SECDRIFT)
        ts_checks |= TSCHK_REQUIRED;
    }
  }
  if ((ts_checks & TSCHK_RTIME) && (ts_checks & TSCHK_REQUIRED)) {
    next_minor_frame = next_minor_frame % LCMMN;
    commit_tstamp( next_minor_frame, rtime );
  } else if ( next_minor_frame == 0 ) {
    //m* = (2^16)%lcm(M,n)
    //m1 = 0
    //t1 = t0 + d(2^16 - m* - m0)/n
    next_minor_frame = ROLLOVER_MFC;
    commit_tstamp( 0, tm_info.t_stmp.secs +
      MFSECDEN *
      ((long)USHRT_MAX - tm_info.t_stmp.mfc_num - next_minor_frame + 1) /
      MFSECNUM );
  } else if ( next_minor_frame - tm_info.t_stmp.mfc_num > TS_MFC_LIMIT) {
    // q = floor((m-m0)/n): whole seconds since last TS
    // m1 = m0+q*n: New TS.MFCtr
    // t1 = t0 + d*(m1-m0)/n = t0 + d*q : New TS.Time
    unsigned short q = (next_minor_frame - tm_info.t_stmp.mfc_num)/MFSECNUM;
    commit_tstamp( tm_info.t_stmp.mfc_num + q * MFSECNUM,
        tm_info.t_stmp.secs + MFSECDEN * q );
  }
  ts_checks = 0;
  if ( NROWMINF == 1 || MINF_ROW == NROWMINF-1 ) {
    /* Last row of minor frame: Synch Calculations */
    Synch = ( INVSYNCH && collector::majf_row == NROWMAJF-1) ?
      ~SYNCHVAL : SYNCHVAL;
  }

  if ( MINF_ROW == 0 ) {
    MFCtr = next_minor_frame;
    next_minor_frame++;
  }
  
  /* appropriate collection function */
  home = (union home_row *) row[last];
  efuncs[collector::majf_row]();
  rowlets += TRD;
  commit_rows(MFCtr, MINF_ROW, 1);
  MINF_ROW_INC;
  incmod(collector::majf_row, NROWMAJF);
  transmit_data(0);
}

%Collect_Row%

/* Skeleton init_senders_head */
void DAS_IO::tmc_collector::init_senders() {
%init_senders_head%

/* Skeleton init_senders_tail section */
}
%init_senders_tail%

/* Skeleton "rest of the file" section */

#ifdef NEED_TIME_FUNCS
  #define ROWS(x) (((unsigned long)(x))*NROWMINF+MINF_ROW)
  #define FRACSECS(x) (((unsigned long)ROWS(x))*NSECSPER)

  long itime(void) {
      return(tm_info.t_stmp.secs +
        FRACSECS(MFCtr-tm_info.t_stmp.mfc_num) / NROWSPER );
  }
  double dtime(void) {
      return(tm_info.t_stmp.secs +
        (double) FRACSECS(MFCtr-tm_info.t_stmp.mfc_num) / NROWSPER );
  }
  double etime(void) {
    double t;
    static double t0 = -1e9;
    
    t = dtime();
    if (t0 == -1e9) t0 = t;
    return(t - t0);
  }
#endif

/* Skeleton End of File */
