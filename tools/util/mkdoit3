#! /usr/bin/perl -w
use strict;

#ifdef __USAGE
#%C -M -o <doit_name> <srcfile>
#%C -o <doit_name> <srcfile>
#	-M Write dependency information to <doit_name>.dep
#endif

use Getopt::Std;

my %opts;
getopts("Mo:", \%opts) || die "mkdoit3: Fatal\n";
my $srcfile = shift @ARGV ||
  die "mkdoit3: Must specify input filename\n";
die "mkdoit3: Excess command line arguments\n"
  if @ARGV;
die "mkdoit3: Must specify output file with -o option\n"
  unless $opts{o};
open( my $fh, "<", $srcfile ) ||
  die "mkdoit3: Unable to read input file '$srcfile'\n";

my %kwabbr = (
  RT => 'realtime',
  PB => 'playback',
  II => 'InetIn',
  SI => 'SerIn'
);
my %progopts;
my @display; # array of program names
my @client; # array of hashes
my @extract; # array of hashes
my @interact; # array of display and client programs to check in TMBINDIR
my @extracts; # array of extractions in TMBINDIR
my $serin;
my $phrtg;
my $batchfile;
my $memo;
my $logfileroot = '$Experiment';
push @client, { prog => 'playbackclt', cond => undef,
      opts => '' };
while (<$fh>) {
  next if m/^\s*(?:#.*)?$/;
  s/\s*$//;
  # display <name> [options]
  # client <name> [options]
  # phrtg [options]
  # batchfile <name>
  # memo [<logfilename>]
  if ( m/^\s*display\s+(\w+)(?:\s+(.*))?$/ ) {
    my $dispprog = $1;
    my $opts = $2 ? " $2" : '';
    $dispprog =~ m/^\w+disp$/ ||
      die "mkdoit3: Invalid display name: '$dispprog'\n";
    push @display, $dispprog;
    $progopts{$dispprog} = $opts;
    push @interact, $dispprog;
  } elsif ( m/^\s* client \s+ (?:\[(\S+)\] \s+)? (\w+) (?:\s+ (.*))?$/x ) {
    my $cltcond = $1 || "RT";
    my $cltprog = $2;
    my $opts = $3 ? " $3" : '';
    $cltprog =~ m/^\w+clt$/ || die "Invalid client name: '$cltprog'\n";
    $opts ne '' && warn "Options ignored on client program: '$cltprog'\n";
    my $pcond = parse_condition($cltcond);
    push @client, { prog => $cltprog, cond => $pcond, opts => $opts };
    push @interact, $cltprog;
    # die "mkdoit3: Only one client allowed\n" if $client;
    # $client = $cltprog;
    # $progopts{$cltprog} = $opts;
  } elsif ( m/^\s* extraction \s+ (?:\[(\S+)\] \s+)? (\w+) (?:\s+ (.*))?$/x ) {
    my $extcond = $1 || '';
    my $extprog = $2;
    my $opts = ' -t $FlightNode' . ($3 ? " $3" : '');
    my $pcond = $extcond ne '' ? parse_condition($extcond) : undef;
    push @extract, { prog => $extprog, name => '-', cond => $pcond, opts => $opts };
    push @extracts, $extprog;
  } elsif ( m/^\s* server \s+ (?:\[(\S+)\] \s+)? (\S+) \s+ (\w+) (?:\s+ (.*))?$/x ) {
    my $srvcond = $1 || '';
    my $srvname = $2;
    my $srvprog = $3;
    my $opts = $4 ? " $4" : '';
    my $pcond = $srvcond ne '' ? parse_condition($srvcond) : undef;
    push @extract, { prog => $srvprog, name => $srvname, cond => $pcond, opts => $opts };
    push @extracts, $srvprog;
  } elsif ( m/^\s* SerIn \s+ (\w+) (?:\s+ (.*))?$/xi ) {
    $serin = $1;
    my $opts = $2 ? " $2" : '';
    $progopts{$serin} = $opts;
    push @extracts, $serin;
  } elsif ( m/^\s*phrtg(?:\s+(.*))?$/ ) {
    my $opts = $1 ? " $1" : '';
    die "mkdoit3: phrtg specified more than once\n" if defined $phrtg;
    $phrtg = 1;
    $progopts{phrtg} = $opts;
  } elsif ( m/^\s*batchfile\s+(\w+)\s*$/ ) {
    die "mkdoit3: Only one batchfile allowed\n" if defined $batchfile;
    $batchfile = $1;
  } elsif ( m/^\s*memo(?:\s+(\w+)\.log)?\s*$/ ) {
    $memo = 1;
    $logfileroot = $1 if $1;
  } else {
    die "mkdoit3: Unrecognized syntax: '$_'\n";
  }
}
close $fh || warn "Error closing source file\n";
if ( $opts{M} ) {
  open( $fh, ">", "$opts{o}.dep" ) ||
    die "mkdoit3: Unable to write to $opts{o}.dep\n";
  print $fh "$opts{o} :", map( " ${_}nc.cc", @display ), "\n";
  close $fh || warn "Error closing $opts{o}.dep\n";
  exit(0);
}

# %screen = display => [ { varname => Scr$scrnum,
#                          screenname => 'demo',
#                          width => 28,
#                          height => 5 } ]
my %screen;
my $scrnum = 1;
for my $disp ( @display ) {
  open( $fh, "<", "${disp}nc.cc" ) ||
    die "mkdoit3: Unable to read ${disp}nc.cc\n";
  my $scr = $screen{$disp} = [];
  while (<$fh>) {
    if ( m/nct_init\("(\w+)",(\d+),(\d+)\);/ ) {
      push @$scr, { varname => "scr$scrnum",
          screenname => $1,
          height => $2,
          width => $3 };
      ++$scrnum;
    }
  }
}

open( $fh, ">", $opts{o} ) ||
  die "mkdoit3: Unable to write to $opts{o}\n";

print $fh
  "#! /bin/bash\n",
  "doit=$opts{o}\n";

print $fh <<'EOFM';

function print_usage {
cat <<EOF
$doit [options]
  Starts Instrument operation
$doit [options] stop
  Send Quit command to running system (monarch_cmd)
$doit [options] not
  Shuts down any straggling processes after system has stopped (monarchctl -Q)
$doit [options] wait
  Does not interact with instrument until it is up and operating (monarchctl -S)

options:
  -h display this message
  -s use screen for text-mode data display (default)
  -a use ASCII chars for line-drawing
  -p <run> play back <run>
EOFM

if ( defined($serin) ) {
  print $fh "  -t use SerIn as specified in .doit\n";
}

print $fh <<'EOFM';
EOF
}
EOFM

print $fh <<'EOF';

function select_arg {
  n=$1
  shift $n
  echo $1
}

statusready=no
function isready {
  quiet=no
  [ "$1" = "quiet" ] && quiet=yes
  msgf -2 "monarchctl $TM_OPT -VS"
  monarchctl $TM_OPT -VS 2>&1 |
  ( while read j; do
      [ $quiet = no ] && echo $j
      sj=${j#* Status: Ready:}
      if [ "$j" != "$sj" ]; then
        exit 0
      fi
    done
    exit 1
  ) && statusready=yes
}

srcmode=realtime
dispmode=screen
ncopts=''
while getopts "hap:st" opt; do
  case $opt in
    h) print_usage; exit 0;;
    a) ncopts='-a';;
    p) srcmode=playback; Run=$OPTARG;;
    s) dispmode=screen; dispmodescreen=1;;
    t) srcmode=SerIn;;
    \?) exit 1;; # getopts reports the error
    :) exit 1;; # getopts reports the error
  esac
done

# We haven't finished parsing the arguments, but we can
# be pretty sure whatever it is, we will need to read
# the configuration to execute it.
. /usr/local/libexec/load_exconfig.sh
msgProgram=$doit
[ -n "$CFG_ERROR" ] && msgf 3 "$CFG_ERROR"
[ -n "$FlightNode" ] && export FlightNode

arg=`select_arg $OPTIND $*`
case "$arg" in
  stop)
    echo "Trying to stop the instrument"
    monarch_cmd -V $CMD_OPT quit
    exit 0;;
  not)
    echo "Trying harder to stop the instrument"
    monarchctl $TM_OPT -VQ
    exit 0;;
  wait)
    [ $srcmode = playback ] &&
      msgf 3 "wait is not supported for playback"
    cmd=wait;;
  '') cmd=start;;
  *) msgf 3 "Invalid command: '$arg'";;
esac

if [ -n "$srcmode" ]; then
  [ "$srcmode" = "SerIn" -a -n "$Run" ] &&
    msgf 3 "Cannot specify both -t and -p"
else
  case "$SRCMODE" in
    SerIn) srcmode=SerIn;;
    InetIn) srcmode=InetIn;;
    *) srcmode=realtime;;
  esac
fi
EOF

if (!defined($serin)) {
  print $fh
    '[ $srcmode = SerIn ] && msgf 3 "SerIn is not configured"', "\n";
}

print $fh <<'EOF';
case $dispmode in
  screen) nc=nc; ncopt=$ncopts;;
  pterm) nc=nc; ncopt=$ncopts;;
  photon) nc='';;
  *) msgf 3 "Unknown dispmode: '$dispmode'";;
esac

umask 2

# Check that we are running from the correct
# location. This code was more complicated
# under QNX to handle /net
[ -z "$CltHomeDir" ] && CltHomeDir=$HomeDir
dir=$PWD
[ "$dir" = "$CltHomeDir" ] ||
  msgf 3 "Not in CltHomeDir $CltHomeDir"

# We are now in 'start' or 'wait'
# srcmode is playback or realtime, though could eventually include
# SerIn and/or InetIn.

# mkdoit can add more logic here.
# We do not launch lclsrvr if $srcmode = realtime -a -z "$FlightNode"
# (i.e. running flight.sh on the local machine)
# The other $srcmodes (SerIn, InetIn) will default to playbacksrvr,
# but can be overridden.
#-----------------
# lclsrvr=playbacksrvr
# batchfile=interact
# client=playbackclt
# [ $srcmode = realtime ] && client=Democlt
# [ $srcmode = realtime -a $FltNode_Access = Local ] && lclsrvr=''

EOF

print $fh
  "logfileroot=$logfileroot\n",
  "interacts='", join( ' ', @interact ), "';\n",
  "extracts='", join( ' ', @extracts ), "';\n";
print $fh "batchfile=$batchfile\n" if defined $batchfile;

for my $client ( @client ) {
  if ($client->{cond}) {
    print $fh '[ ', cond2sh($client->{cond}), ' ] && ';
  }
  print $fh 'client=', $client->{prog}, "\n";
}

print $fh "lclsrvr=playbacksrvr\n";
for my $server ( @extract ) {
  if ($server->{name} eq 'cmd' ) {
    if ($server->{cond}) {
      print $fh '[ ', cond2sh($server->{cond}), ' ] && ';
    }
    print $fh "lclsrvr='", $server->{prog}, $server->{opts}, "'\n";
  }
}

print $fh <<'EOF';

# We need to define session and Experiment before invoking
# screen so they will be inherited in each window. This is
# addressed in the Screen Manual's Overview section:
# https://www.gnu.org/software/screen/manual/screen.html#Overview
if [ -z "$STY" ]; then
  export session=$$
elif [ -z "$session" ]; then
  msgf 2 "session not defined inside screen"
fi

# lcllogfile is the file we want local memo to write to
# rmtlogfile is the file we would like to display with less,
#  even if it is not really remote.
if [ $srcmode = realtime ]; then
  if [ $FltNode_Access = Remote ]; then
    lcllogfile=$logfileroot.clt.log
    rmtlogfile=$HomeDir/$logfileroot.log
  else
    lclsrvr=''
    rmtlogfile=$logfileroot.log
  fi
else # not realtime
  RemEx=$Experiment
  Experiment=$RemEx.PB.$session
  lcllogfile=$Experiment.log
  # srvr and bfr are necessarily local
  TM_OPT=''
  CMD_OPT=''
fi

# At this point cmd can only be 'start' or 'wait'. Thus
# a) we always want to check paths, so don't need check_path
# b) startup var is redundant with cmd = start
# check_path=no
# startup=no
# case $cmd in
#   start) startup=yes; check_path=yes;;
#   stop);;
#   not);;
#   wait) check_path=yes;;
#   screen);;
#   *) nl_error "Invalid option: '$option'";;
# esac

# Determine the path. Strictly speaking, this does
# not have to happen before start, but I'd like
# to check that the required applications exist
VERSION=1.0
case $srcmode in
  playback)
    # Need to find the data
    ddir=`locate_rundir $Run | tr : /`
    [ -z "$ddir" ] && msgf 3 "Unable to locate run $Run"
    [ -f $ddir/VERSION ] && VERSION=`cat $ddir/VERSION`;;
  *)
    ddir=$HomeDir
    [ -f VERSION ] && VERSION=`cat VERSION`;;
esac

TMBINDIR=$PWD/bin/$VERSION
[ -d $TMBINDIR ] ||
  msgf 3 "Unable to locate bin dir for VERSION $VERSION"
export PATH=$TMBINDIR:$PATH

missing=''
for app in $interacts; do
  f=`which $app$nc`
  [ -n "$f" -a -x "$f" ] ||
    missing="$missing $app$nc"
done
for app in $extracts; do
  f=`which $app`
  [ -n "$f" -a -x "$f" ] ||
    missing="$missing $app"
done
[ -n "$missing" ] &&
  msgf 3 "Unable to locate required application(s):$missing"

#-----------------------------------------------------
# Everything before this point will be executed twice,
# once before starting screen, once after, so we should
# limit any informational messages.
if [ -z "$STY" ]; then
  # echo "cmd is '$cmd' srcmode is '$srcmode' dispmode is '$dispmode'"
  # hit_any_key
  screen -t $doit $0 $*
  clear # after exiting screen
  echo "$doit completed, screen closed"
  exit 0
fi

# Running under screen
screen -X logfile "$doit.$session.log"
screen -X log on
screen -X split
screen -X focus
screen -X resize 3
screen -X focus
clear

# Until we have sessions, the only distinction we can make
# about where we connect is local or remote.
#
# Startup local memo: The only case where we would not want to
# start a local memo is if srcmode is realtime and there is no
# FlightNode. In that case, we are starting up an interact script
# on the local machine, and interact scripts start up their own
# memo.
[ -n "$lcllogfile" ] &&
  Launch memo memo -o $lcllogfile -l4

if [ $cmd = start ]; then
  if [ $srcmode = playback ]; then
    # Startup playback modules:
    Launch tm_bfr bfr -s Unix
    Launch tm_gen rdr -P $ddir -a
    #   # playbacksrvr (started later via $lclsrvr)
  elif [ $srcmode = realtime ]; then
    if [ $SERVICE = Installed ]; then
      monarchctl_opt='-r'
      [ -n "$batchfile" ] && monarchctl_opt="-R $batchfile"
      msgf 0 "Running isready quiet, TM_OPT=$TM_OPT"
      isready quiet
      if [ $statusready = no ]; then
        msgf 0 "running monarchctl -V $TM_OPT $monarchctl_opt"
        monarchctl -V $TM_OPT $monarchctl_opt
        isready
      fi
    else
      msgf 0 "Starting flight.sh"
      screen -t flight.sh /usr/local/libexec/flight.sh
      msgf 0 "Waiting for memo"
      waitfor -q /var/run/monarch/$Experiment/memo forever
      msgVdefault=''
      sleep 1
      msgf 0 "Waiting for tm_bfr"
      waitfor -q /var/run/monarch/$Experiment/tm_bfr forever
      msgf 0 "found tm_bfr, waiting for cmd server"
      waitfor -q /var/run/monarch/$Experiment/cmd forever
    fi
EOF

if ($serin) {
  print $fh
    '          elif [ $srcmode = SerIn ]; then', "\n",
    "            Launch tm_bfr -s Unix\n",
    "            Launch tm_gen $serin", $progopts{$serin}, "\n";
}

print $fh <<'EOF';
  else
    msgf 3 "srcmode='$srcmode' not implemented in start"
  fi
elif [ $cmd = wait ]; then
  [ $srcmode = realtime ] || msgf 3 "Invalid srcmode '$srcmode'"
  msgf 0 "Waiting for startup"
  if [ $SERVICE = Installed ]; then
    while [ statusready = no ]; do
      isready quiet
      sleep 1
    done
  else
    waitfor /var/run/monarch/$Experiment/tm_bfr forever
    msgf 0 "found tm_bfr, waiting for command server"
    waitfor /var/run/monarch/$Experiment/server forever
  fi
else
  msgf 3 "Unexpected invalid cmd '$cmd'"
fi

# At this point, we can assume that memo, tm_bfr and server
# are running, so we can start all the UI clients
# Display programs, keyboard client, etc.
# We will point getcon and disp programs to the lclsrvr, but
# still need to figure out how to tell lclsrvr to quit.
# I guess I need a Stopper app to send Quit where I want.
# That would work for this as well as 'doit stop'.
[ -n "$lclsrvr" ] &&
  Launch cmd $lclsrvr
if [ -n "$rmtlogfile" ]; then
  # log="-Logfile \"less.$session.log\" -L"
  if [ $FltNode_Access = Remote ]; then
    msgf 0 "Starting less on remote system"
    screen -t logfile /bin/sh -c "echo \$\$ >less.pid.$session; exec $SSH_CMD less +F $rmtlogfile"
  else
    msgf 0 "Starting less on local system"
    screen -t logfile /bin/sh -c "echo \$\$ >less.pid.$session; exec less +F $rmtlogfile"
  fi
fi

# gcopt definition might need to be moved earlier if it
# needs to be defined conditionally
gcopt=''
EOF

for my $disp ( @display ) {
  for my $scr ( @{$screen{$disp}} ) {
    print $fh
      "screen -t $scr->{screenname} /usr/local/sbin/getcon ",
      "\$gcopt $scr->{varname} \$session\n",
      "screen -X select $scr->{screenname}\n",
      "screen -X width -w $scr->{width}\n",
      "#screen -x height -w $scr->{height}\n";
  }
}

print $fh <<'EOF';
screen -t clt /usr/local/sbin/getcon $gcopt clt $session
screen -X focus
screen -X select clt
screen -X height -w 2
screen -X width -w 80
screen -X focus
screen -X select $doit

msgf -2 Handling less.pid.$session
less_pid=''
if [ -f less.pid.$session ]; then
  less_pid=`cat less.pid.$session`
  rm -f less.pid.$session
  msgf -2 "Recovered less_pid='$less_pid'"
fi

# Now collect display consoles for each disp screen and clt
msgf -2 collecting screens
EOF

print $fh "for screen in ",
  join( ' ', map( "$_->{varname}",
        map( @{$screen{$_}}, @display ) ),
        'clt' ), "; do\n";

print $fh <<'EOF';
  term=''
  if waitfor pty.$screen.$session 3; then
    term=`cat pty.$screen.$session`
    rm pty.$screen.$session
    eval ${screen}_term=$term
  else
    msgf 2 pty.$screen.$session did not appear
  fi
done

EOF

my @clttermvarlist =
  map( "\$$_->{varname}_term",
    map( @{$screen{$_}}, @display ) );
my $clttermcond = join '',
  "if [ ",
    join(' -o ',
      map("-n \"$_\"", '$clt_term', @clttermvarlist)),
  " ]; then\n";

# print $fh $clttermcond;
# print $fh <<'EOF';
  # screen -X split
  # screen -X focus
  # screen -X resize 3
  # screen -X select clt
  # screen -X focus
# EOF
# for my $disp ( reverse @display ) {
  # my $scr = $screen{$disp};
  # print $fh
    # map "  screen -X select $_->{screenname}\n", reverse @$scr;
# }
# print $fh "fi\n\n";

for my $disp ( @display ) {
  my $scr = $screen{$disp};
  my @scrvars = map( "\$$_->{varname}_term", @$scr);
  print $fh
    "if [ ", join( " -a ", map( "-n \"$_\"", @scrvars)), " ]; then\n",
    "  msgf 0 \"Starting $disp\$nc \$ncopt \$TM_OPT ",
        join(' ', @scrvars), "\"\n",
    "  Launch -TMC- $disp\$nc \$ncopt \$TM_OPT ",
        join(' ', @scrvars), "\n";
  if ( $disp eq $display[0] ) {
    print $fh
      "  screen -X select $scr->[0]->{screenname}\n";
  }
  print $fh
    "else\n",
    "  msgf 1 \"Skipping $disp\$nc\"\n",
    "fi\n";
}

for my $ext ( @extract ) {
  if ($ext->{cond}) {
    print $fh '[ ', cond2sh($ext->{cond}), ' ] && ';
  }
  print $fh "Launch ", $ext->{name}, " ", $ext->{prog}, $ext->{opts}, "\n";
}

if ( $phrtg ) {
  print $fh '[ $dispmode = screen ] || Launch - phrtg -C $FlightNode -P $ddir',
    $progopts{phrtg}, "\n";
}

print $fh "\n$clttermcond";
print $fh
  "  msgf 0 \"Starting \$client\$nc \$CMD_OPT \$clt_term ",
      join(' ', @clttermvarlist), "\"\n",
  "  \$client\$nc \$CMD_OPT \$clt_term ",
      join(' ', @clttermvarlist), "\n",
  "else\n",
  "  msgf 2 \"Unable to run client \$client\$nc due to missing ptys\"\n",
  "fi\n";

print $fh <<'EOF';

# This is where we run. When the client quits,
# we are done and need to clean up
screen -X only
[ $dispmode != photon ] &&
  /usr/local/sbin/getcon -o /dev/null -e $session
[ -n "$lclsrvr" ] && monarch_cmd -V Quit >/dev/null 2>&1
screen -X select logfile
sleep 1
if [ -n "$less_pid" ] && kill -0 $less_pid; then
  screen -X -p logfile stuff ^Cq
  sleep 1
  if kill -0 $less_pid 2>/dev/null; then
    msg -Vn $doit Follow up with kill to less
    kill $less_pid 2>/dev/null
  fi
fi
EOF

#=======================================================

sub parse_condition {
  my $cond = shift;
  my $lvl = 0;
  my $toks = parse_tokens($cond);
  my @stack;
  my @states = qw(preterm postterm postop);
  my $state = 'preterm';
  while ( @$toks ) {
    my $token = shift @$toks;
    if ($state eq 'preterm') { # preterm, can accept monadic, lparen, keyword or term
      $token->{prestate} = 'preterm';
      if ($token->{type} eq 'monadic') {
        push(@stack, $token);
        $state = 'postop';
      } elsif ($token->{type} eq 'keyword') {
        push(@stack, $token);
        $state = 'postterm';
      } elsif ($token->{type} eq 'lparen') {
        push(@stack, $token);
        $state = 'preterm';
      } elsif ($token->{type} eq 'term') {
        push(@stack, $token);
        $state = 'postterm';
      } else {
        die "Syntax error preterm\n";
      }
    } elsif ($state eq 'postterm') { # postterm: rparen, dyadic
      if ($token->{type} eq 'rparen') {
        my $expr = pop @stack || die "Stack underflow on rparen\n";
        my $lparen = pop @stack || die "Stack underflow on rparen\n";
        $lparen->{type} eq 'lparen' || die "rparen without matching lparen (2)\n";
        $lparen->{arg} = $expr;
        unshift @$toks, { type => 'term', op => $lparen };
        $state = $lparen->{prestate};
      } elsif ($token->{type} eq 'dyadic') {
        push @stack, $token;
        $state = 'postop';
      } else {
        die "Syntax error postterm\n";
      }
    } elsif ($state eq 'postop') { # postop: monadic, lparen, keyword, term
      if ($token->{type} eq 'monadic') {
        $token->{prestate} = 'postop';
        push @stack, $token;
      } elsif ($token->{type} eq 'lparen') {
        $token->{prestate} = 'postop';
        push @stack, $token;
        $state = 'preterm';
      } elsif ($token->{type} eq 'keyword' || $token->{type} eq 'term') {
        my $op = pop(@stack) || die "Stack underflow postop kw|term,monadic\n";
        if ($op->{type} eq 'monadic') {
          $op->{arg} = $token;
          $state = $op->{prestate};
          unshift @$toks, { type => 'term', op => $op };
        } elsif ($op->{type} eq 'dyadic') {
          my $arg1 = pop(@stack) || die "Stack underflow postop kw|term,dyadic\n";
          $state = $arg1->{prestate};
          $op->{arg1} = $arg1;
          $op->{arg2} = $token;
          unshift @$toks, { type => 'term', op => $op };
        } else {
          die "Unexpected op type '" . $op->{type} . "' in postop\n";
        }
      } else {
        die "Syntax error postop\n";
      }
    } else {
      die "Bad state\n";
    }
  }
  @stack == 1 || die "Incomplete expression\n";
  return pop @stack;
}

sub parse_tokens {
  my $str = shift;
  my $istr = $str;
  my $toks = [];
  while ($str ne '') {
    if ($str =~ s/^!//) {
      push(@$toks, { type => 'monadic', op => '!' });
    } elsif ( $str =~ s/^([|&])// ) {
      push(@$toks, { type => 'dyadic', op => $1 });
    } elsif ( $str =~ s/^([(])// ) {
      push(@$toks, { type => 'lparen', op => $1 });
    } elsif ( $str =~ s/^([)])// ) {
      push(@$toks, { type => 'rparen', op => $1 });
    } elsif ( $str =~ s/^(RT|realtime|PB|playback|II|InetIn|SI|SerIn|screen|pterm|photon)\b// ) {
      my $kw = $kwabbr{$1} || $1;
      push(@$toks, { type => 'keyword', op => $kw });
    } else {
      warn "Bad logic syntax in '$istr' before '$str'\n";
      return $toks;
    }
  }
  return $toks;
}

sub cond2sh {
  my $expr = shift;
  if ($expr->{type} eq 'monadic') {
    return $expr->{op} . ' \( ' . cond2sh($expr->{arg}) . ' \)';
  } elsif ($expr->{type} eq 'dyadic') {
    my $op = ($expr->{op} eq '|') ? ' -o ' : ' -a ';
    return cond2sh($expr->{arg1}) . $op . cond2sh($expr->{arg2});
  } elsif ($expr->{type} eq 'keyword') {
    my $varname = '$dispmode';
    if ($expr->{op} =~ m/^realtime|playback|InetIn|SerIn$/ ) {
      $varname = '$srcmode';
    }
    return "$varname = " . $expr->{op};
  } elsif ($expr->{type} eq 'term') {
    return cond2sh($expr->{op});
  } elsif ($expr->{type} eq 'lparen') {
    return '\( ' . cond2sh($expr->{arg}) . ' \)';
  } else {
    die "Invalid condition node type: " . $expr->{type};
  }
}

my $perm = (stat $opts{o})[2] & 07777;
my $umask = umask;
chmod( $perm | (0111 & ~$umask), $opts{o} );
